# Computational Pipeline for PDB Analysis

This shell script provides a computational pipeline for analyzing Protein Data Bank (PDB) files generated by AlphaFold2-monomer. The pipeline includes multiple steps like determining the closest PDBs around a given residue, calculating Root Mean Square Deviation (RMSD), performing energetics analysis, and visualization.

![Workflow Diagram](pipeline.png)

## Table of Contents
1. [Computational Pipeline for PDB Analysis](#computational-pipeline-for-pdb-analysis)
2. [Subscripts](#subscripts)
    - [Individual Documentation](#individual-documentation)
3. [Requirements](#requirements)
4. [Usage](#usage)
    - [Command-Line Options](#command-line-options)
5. [Output](#output)
6. [Workflow Steps](#workflow-steps)
7. [Error Handling](#error-handling)
8. [Example](#example)
9. [TODO](#todo)
10. [Notes](#notes)


## Subscripts

All subscripts can be accessed independently and used from the command line as seperate utilities:

```bash
python {script}.py <arg1> <arg2> ...
```
#### Individual Documenation
- [`chimera.py`](docs/chimera.md)
- [`closest_ranks.py`](docs/closest_ranks.md)
- [`energetics.py`](docs/energetics.md)
- [`pml_for_pymol.py`](docs/pml_for_pymol.md)
- [`report.py`](docs/report.md)
- [`thumbnails.py`](docs/thumbnails.md)

## Requirements
- Python 3.x (3.11 is used in the script)
- BioPython (`pip install biopython`)
- NumPy (`pip install numpy`)
- WeasyPrint (`pip install weasyprint`)
- [PyMOL](https://pymol.org/dokuwiki/doku.php?id=installation) (Download and setup page)
- [EvoEF1](https://github.com/tommyhuangthu/EvoEF) (GitHub repository for installation and documentation)
- [UCSF ChimeraX](https://www.cgl.ucsf.edu/chimerax/) (Download and documentation page)

## Usage
Run the shell script using the following syntax:
```bash
./pipeline.sh -d <pdbs_dir> -r <residue_number> -n <name> -c <chimera_path> -e <evoef_path> -o <output_folder>
```

### Command-Line Options
- `-d <pdbs_dir>`: Directory containing the PDB files. Must have subdirs `wt` and `ms`.
- `-r <residue_number>`: Residue number of interest.
- `-n <name>`: User-defined name for the analysis.
- `-c <chimera_path>`: Path to the ChimeraX executable.
- `-e <evoef_path>`: Path to the EvoEF1 script.
- `-o <output_folder>`: Directory where the output will be saved.

## Output
- RMSD values between `wt` (wild type) and `ms` (missense) files.
- Energetics analysis files.
- H-bond data using Chimera.
- Thumbnails of the PDB structures.
- A comprehensive PDF report summarizing the analysis.

All output files will be saved in the specified `output_folder`.

## Workflow Steps

1. Initialization: All the required command-line arguments are parsed and checked.
2. Closest Ranks: The script `closest_ranks.py` identifies PDB files that are closest at the given residue.
3. RMSD Calculation: The RMSD between the highest ranking `wt` and `ms` files is calculated using `RMSD.py`.
4. Energetics Analysis: Gibbs free energy calculations are performed using `energetics.py` and EvoEF1.
5. Hydrogen Bonds Analysis: The number of H-bonds are determined using `chimera.py` and the UCSF Chimera tool.
6. Thumbnail Generation: Thumbnails for the PDB structures are generated. These are used in the report.
7. Report Generation: A comprehensive report summarizing the analysis is generated.
8. Cleanup: All raw output files except PDF and CSV are moved to a `raw_output` subdirectory within `output_folder`.

## Error Handling
- The script checks the return status of each Python script it runs. If any script fails, the pipeline will stop and display an error message.

## Example
```bash
./pipeline.sh \
-d /path/to/pdbs \
-r 45 \
-n my_analysis \
-c /path/to/chimera \
-e /path/to/evoef \
-o /path/to/output
```

## TODO
- Implement more detailed error reporting and logging.
- Add support for other formats and tools besides PDB, EvoEF1, and ChimeraC.
- Include an option for parallelizing steps to improve performance.
- Add option to visualize H-bonds @ missense residue.

## Notes
- It is assumed that all the required Python scripts are present in a `scripts` folder residing in the same directory as the pipeline script.
- The script runs some steps in parallel to improve performance but will wait for all to complete before proceeding to the next steps.